import asyncio
from pyppeteer import launch
import random
import requests
import json
import time
from openpyxl import load_workbook
import openpyxl

class TrickUrlSession(requests.Session):
    '''重写url禁止url进行urlcode'''
    def setUrl(self, url):
        self._trickUrl = url
    def send(self, request, **kwargs):
        if self._trickUrl:
            request.url = self._trickUrl
        return requests.Session.send(self, request, **kwargs)


def screen_size():
    """使用tkinter获取屏幕大小"""
    import tkinter
    tk = tkinter.Tk()
    width = tk.winfo_screenwidth()
    height = tk.winfo_screenheight()
    tk.quit()
    return width, height


def input_time_random():
    return random.randint(100, 151)


async def try_validation(page, distance=308):
    # 将距离拆分成两段，模拟正常人的行为
    distance1 = distance - 10
    distance2 = 10
    btn_position = await page.evaluate('''
        () =>{
        return {
        x: document.querySelector('#nc_1_n1z').getBoundingClientRect().x,
        y: document.querySelector('#nc_1_n1z').getBoundingClientRect().y,
        width: document.querySelector('#nc_1_n1z').getBoundingClientRect().width,
        height: document.querySelector('#nc_1_n1z').getBoundingClientRect().height
        }}
        ''')
    x = btn_position['x'] + btn_position['width'] / 2
    y = btn_position['y'] + btn_position['height'] / 2
    await page.mouse.move(x, y)
    await page.mouse.down()
    await page.mouse.move(x + distance1, y, {'steps': 30})
    await page.waitFor(800)
    await page.mouse.move(x + distance1 + distance2, y, {'steps': 20})
    await page.waitFor(800)
    await page.mouse.up()


#获取token主函数
async def token_main(url,username,password):
    browser = await launch(headless=False, args=['--disable-infobars'])
    page = await browser.newPage()
    await page.goto(url)
    width, height = screen_size()
    # 最大化窗口
    await page.setViewport(viewport={'width': width, 'height':height})
    # 设置浏览器
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'
                                ' Chrome/74.0.3729.169 Safari/537.36')
    # 防止被识别，将webdriver设置为false
    await page.evaluate(
        '''() =>{ Object.defineProperties(navigator,{ webdriver:{ get: () => false } }) }''')
    #登录的用户名和密码
    await page.type('#BX_Layer2 > div > form > div > div > div > input',username, {'delay': input_time_random() - 50})
    await page.type('.BX_Sprite2 .el-form .el-form-item:nth-child(2) .el-form-item__content .el-input__inner',password, {'delay': input_time_random()})
    # 登录时的验证
    normal_login = await page.xpath('//*[@id="BX_Layer2"]/div/form/div[4]/button')
    await normal_login[0].click()
    time.sleep(1)
    # 滑动验证
    await page.waitFor(1000)
    await try_validation(page)
    await page.waitFor(2000)
    #await shibieguanli(page)
    await page.waitFor(1000)
    #await qudaofengkong(page)
    await page.waitFor(2000)
    #res = await page.cookies()
    login_token = await page.evaluate("window.localStorage.getItem('Sense-Token')",force_expr=True)
    login_companyid = await page.evaluate("window.localStorage.getItem('Sense-CompanyId')", force_expr=True)
    #print("获取登录到的token是:",login_token,"获取登录后用户company:",login_companyid)
    #图片保存
    #await page.screenshot({'path': 'shibieguanli.png'})
    await page.close()
    login_kwargs = {"token":login_token,"companyid":login_companyid}
    #print(login_kwargs)
    return login_kwargs


#案场列表获取
async def store_list_find(companyid,headers):
    url = 'https://icloud.sensetime.com/senserealty/store/api/sensego/console/v1.0/store/all'
    querystring = {"company_id":companyid}
    res = requests.session()
    print("进入的headers:",headers,companyid)
    store_name = res.get(url=url, headers=headers, params=querystring)
    print(store_name)
    res = store_name.json()
    return res

def get_store_name(store_id,**kwargs):
    #返回案场名称（用作文件命名）
    store_name = {}
    store_list_info = kwargs.get('list')
    if store_list_info:
        for i in range(len(store_list_info)):
            store_info_dict = store_list_info[i]
            store_name[store_info_dict['store_id']] = store_info_dict['store_name']
        return store_name[store_id] if store_id in store_name else store_id
    else:
        return store_id

#渠道页面
async def get_qudao_page(store_id,headers):
    url = 'https://icloud.sensetime.com/senserealty/recognition/api/sensego/console/v1.0/trade'
    querystring = {"type": "0", "store_id":store_id if store_id  else None}
    headers = headers if headers else None
    res = requests.session()
    qudao_req = res.get(url=url, headers=headers, params=querystring)
    qudao_res = qudao_req.json()
    qudao_list = qudao_res.get('list') if qudao_res.get('list') else store_id
    return store_id,qudao_list

#渠道详情数据
def get_qudao_detail_page(id_number,store_id,headers):
    url = 'https://icloud.sensetime.com/senserealty/recognition/customer-detail/risk/' + store_id + '/api/sensego/console/v1.0/trade/trace'
    querystring = {"id_number":id_number, "store_id":store_id}
    res = requests.session()
    qudao_detail_req = res.get(url=url, headers=headers, params=querystring)
    qudao_detail_res = qudao_detail_req.json()
    id_capture_image = qudao_detail_res.get('id_capture_image') if qudao_detail_res.get('id_capture_image') else str(qudao_detail_res)
    qudao_detail_list = qudao_detail_res.get('list') if qudao_detail_res.get('list') else str(qudao_detail_res)
    return id_capture_image,qudao_detail_list

#自主报备页面数据
async def get_baobei_page(store_id,headers):
    url = 'https://icloud.sensetime.com/senserealty/recognition/api/sensego/console/v1.0/report/all'
    querystring = {"store_id":store_id}      #page_index和count是非必填参数
    res = requests.session()
    baobei_req = res.get(url=url, headers=headers, params=querystring)
    baobei_res = baobei_req.json()
    baobei_list = baobei_res.get('list') if baobei_res.get('list') else store_id
    return store_id,baobei_list

#报备详细记录查询数据
def get_baobei_detail_page(store_id,_id,headers):
    url = 'https://icloud.sensetime.com/senserealty/recognition/customer-detail/report/'+ store_id +'/api/sensego/console/v1.0/report'
    querystring = {"store_id":store_id,"_id":_id}
    res = requests.session()
    baobei_detail_req = res.get(url=url, headers=headers, params=querystring)
    baobei_detail_res = baobei_detail_req.json()
    print("自主报备详情",baobei_detail_res)
    baobei_detail_list = baobei_detail_res.get('results') if baobei_detail_res.get('results') else store_id
    id_detail_image = baobei_detail_res.get('image') if baobei_detail_res.get('image') else str(baobei_detail_res)
    print(baobei_detail_list)
    #渠道风控详情返回数据
    return id_detail_image,baobei_detail_list

#以图搜图接口
async def get_search_image_page(group_id,face_image,headers):
    url = 'https://icloud.sensetime.com/senserealty/recognition/api/sensego/console/v1.0/realestate/trace'
    data = {"group_id":group_id,"face_image":""}
    res = requests.session()
    get_search_image_req = res.post(url=url, headers=headers,data=json.dumps(data))
    get_search_image_res = get_search_image_req.json()
    get_search_image_list = get_search_image_res.get('results') if get_search_image_res.get('results') else group_id
    print("以图搜图页面",get_search_image_list)
    for i in range(len(get_search_image_list)):
        #print(store_list[i])
        store_dict = get_search_image_list[i]
        #返回案场渠道风控匹配记录数据
        print(store_dict['person_id'],store_dict['arrived_at'],store_dict['arrived_image_url'],store_dict['trace'])
    return get_search_image_list

#到访统计-总数
async def get_daofang_page_count(store_id,end_time,start_time,headers):
    url = 'https://icloud.sensetime.com/senserealty/recognition/api/sensego/console/v1.0/peoplecount/summary'
    data = {"store_id":store_id,"end_time":end_time,"start_time":start_time,"ask_id":"2"}
    res = requests.session()
    get_daofang_req = res.post(url=url, headers=headers,data=json.dumps(data))
    get_daofang_res = get_daofang_req.json()
    get_daofagn_count = get_daofang_res.get('capture_count')
    get_first_time_count = get_daofang_res.get('first_time_count')
    print("到访统计人数",get_daofagn_count,"首次到访统计数据",get_first_time_count)
    return get_daofang_res


#到访统计-访客明细
async def get_daofang_page_summary(store_id,headers):
    url = 'https://icloud.sensetime.com/senserealty/recognition/api/sensego/console/v1.0/peoplecount/total'
    data = {"store_id":store_id}
    res = requests.session()
    get_daofang_summary_req = res.post(url=url, headers=headers,data=json.dumps(data))
    get_daofang_summary_res = get_daofang_summary_req.json()
    print("到访统计人数页面",res)
    daofang_people_count = get_daofang_summary_res.get('people_count') if get_daofang_summary_res.get('people_count') else 0
    print("到访统计人数数据",daofang_people_count)
    return daofang_people_count


#识别结果
async def get_shibie_detail(store_id,headers):
    url = 'https://icloud.sensetime.com/senserealty/recognition/api/sensego/console/v1.0/group/storedevice'
    querystring = {"store_id":store_id}
    res = requests.session()
    store_devicemap = res.get(url=url, headers=headers, params=querystring)
    devicemap = store_devicemap.json()
    store_map_list = devicemap.get('group_device_map') if devicemap.get('group_device_map') else None
    store_device = store_map_list.get('cdb978497a')
    if store_device:
        start_time = "1584806400"
        end_time = "1584875885"
        group_id = "cdb978497a"
        device_id = "00:0c:29:b2:05:77"
        limit = 1000
        geturl = "https://icloud.sensetime.com/senserealty/recognition/api/sensego/console/v1.0/datacenter/visitinfo/query/device?start_time=%s&end_time=%s&group_id=%s&device_id=%s&limit=%s"%(start_time, end_time, group_id, device_id, limit)
        print(geturl)
        Trick = TrickUrlSession()
        Trick.setUrl(geturl)
        get_shibie_request = Trick.get(url=geturl, headers=headers)
        print(get_shibie_request.json())
        return get_shibie_request.json()
    else:
        print("案场没有绑定端")


#excel数据写入
def excel_write_open(sheet,title):
    wb = openpyxl.Workbook()
    ws = wb.create_sheet(index=sheet, title=title)
    return ws,wb

#excel写入新sheet
def excel_write_load(filename,sheet,title):
    wb = openpyxl.load_workbook(filename + '.xlsx')
    ws = wb.create_sheet(index=sheet, title=title)
    return ws,wb


#excel数据保存退出
def excel_write_save(filename,wb):
    return wb.save(filename + '.xlsx')

def timeutil(info_time):
    return time.strftime("%Y--%m--%d %H:%M:%S",time.localtime(int(info_time))) if len(str(info_time)) == 10 else int(time.mktime(time.strptime(info_time, "%Y-%m-%d %H:%M:%S")))

#渠道风控数据写入
async def qudao_cleaning(store_id,qudaolist,headers,ws):
    this_store_id = store_id
    ws.append(["客户姓名","首次到访时间","刷证时间","id_number","刷证图片","匹配的personid","person首次到访","相似度","底图","到访轨迹","到访时间","抓拍位置"])
    if isinstance(qudaolist,list):
        #返回的有渠道列表数据
        qudao_cursor = 0
        qudao_list_length = len(qudaolist)
        while qudao_cursor <= 30:
            if qudao_cursor == qudao_list_length:break
            if qudaolist[qudao_cursor].get('first_capture_time') != 0 and qudaolist[qudao_cursor].get('verify_time') != 0:
                #到访时间和刷证时间都有,进入获取渠道详情
                id_number = qudaolist[qudao_cursor].get('id_number')
                qudao_name = qudaolist[qudao_cursor].get("name")
                first_daofan = timeutil(qudaolist[qudao_cursor].get('first_capture_time'))
                verify_time = timeutil(qudaolist[qudao_cursor].get('verify_time'))
                id_capture_image,qudao_detail_res = get_qudao_detail_page(id_number=id_number,store_id=this_store_id,headers=headers)
                #print("id_capture_image",id_capture_image,"qudao_detail_res",qudao_detail_res)
                if isinstance(qudao_detail_res, list):
                    #print("详情内部搜图结果",qudao_detail_res)
                    for qudao_inner in qudao_detail_res:
                        person_id_search = qudao_inner.get('person_id')
                        arrived_at_search = qudao_inner.get('arrived_at')
                        confidence_search = qudao_inner.get('confidence')
                        arrived_image_url_search = qudao_inner.get('arrived_image_url')
                        trace = qudao_inner.get('trace')
                        #print("获取到的trace",trace)
                        #返回的tance是一个列表
                        inner = 0
                        trace_count = len(trace)
                        while inner <= 5:
                            if inner == trace_count:break
                            device_id = trace[inner].get('device_id')
                            camera_id = trace[inner].get('camera_id')
                            image_url = trace[inner].get('image_url')
                            #print("内存获取的图片地址:",image_url)
                            ts = trace[inner].get('ts')
                            camera_name = trace[inner].get('camera_name')
                            if inner == 0:
                                first_insert = [qudao_name,first_daofan,verify_time,id_number,id_capture_image,person_id_search,
                                                arrived_at_search,confidence_search,arrived_image_url_search,image_url,ts,camera_name]
                                ws.append(first_insert)
                            else:
                                already_insert = ['','','','','',person_id_search,
                                                arrived_at_search,confidence_search,arrived_image_url_search,image_url,ts,camera_name]
                                ws.append(already_insert)
                            inner += 1
                else:
                    temp_no_number = [qudao_name,first_daofan,verify_time,id_number,id_capture_image,"渠道风控详情搜索结果是空的"]
                    ws.append(temp_no_number)
            else:
                qudao_name = qudaolist[qudao_cursor].get('name')
                qudao_id_number = qudaolist[qudao_cursor].get('id_number')
                temp_no_number = [qudao_name,'','',qudao_id_number,"没有详情数据"]
                ws.append(temp_no_number)
            qudao_cursor += 1
    else:
        temp_result = [store_id,'','',"无渠道风控数据"]
        ws.append(temp_result)
    return "渠道风控数收集完毕!"



#自主报备数据写入
async def baobei_cleaning(store_id,baobeilist,headers,ws):
    this_store_id = store_id
    ws.append(["客户名称","身份证号","渠道","-id","首次到访","匹配的personid","person首次到访","相似度","底图","到访轨迹","到访时间","抓拍位置"])
    if isinstance(baobeilist,list):
        #返回的有渠道列表数据
        baobei_cursor = 0
        baobei_list_length = len(baobeilist)
        while baobei_cursor <= 30:
            if baobei_cursor == baobei_list_length:break
            if baobeilist[baobei_cursor].get('first_arrive') != 0:
                #有到访时间进入获取轨迹
                _id = baobeilist[baobei_cursor].get('_id')
                baofan_name = baobeilist[baobei_cursor].get('name')
                daofan_id_number = baobeilist[baobei_cursor].get('id_number')
                daofan_ditch = baobeilist[baobei_cursor].get('ditch')
                first_arrive = baobeilist[baobei_cursor].get('first_arrive')
                daofan_first_arrive = timeutil(first_arrive)
                print("匹配的首次到访时间",daofan_first_arrive)
                id_detail_image,baobei_detail_res = get_baobei_detail_page(store_id=this_store_id,_id=_id,headers=headers)
                print("自主报备返回的详情数据",baobei_detail_res)
                #print("id_capture_image",id_capture_image,"qudao_detail_res",qudao_detail_res)
                if isinstance(baobei_detail_res, list):
                    print("_______进入判断逻辑",isinstance(baobei_detail_res, list))
                    #print("自主报备详情内部搜图结果",baobei_detail_res)
                    for baobei_inner in baobei_detail_res:
                        person_id_search = baobei_inner.get('person_id')
                        arrived_at_search = baobei_inner.get('arrived_at')
                        confidence_search = baobei_inner.get('confidence')
                        arrived_image_url_search = baobei_inner.get('arrived_image_url')
                        trace = baobei_inner.get('trace')
                        #print("获取到的trace",trace)
                        #返回的tance是一个列表
                        inner = 0
                        trace_count = len(trace)
                        while inner <= 5:
                            if inner == trace_count:break
                            #device_id = trace[inner].get('device_id')
                            #camera_id = trace[inner].get('camera_id')
                            image_url = trace[inner].get('image_url')
                            print("内存获取的图片地址:",image_url)
                            ts = trace[inner].get('ts')
                            camera_name = trace[inner].get('camera_name')
                            if inner == 0:
                                first_insert = [baofan_name,daofan_id_number,daofan_ditch,_id,daofan_first_arrive,person_id_search,
                                                arrived_at_search,confidence_search,arrived_image_url_search,image_url,ts,camera_name]
                                ws.append(first_insert)
                            else:
                                already_insert = ['','','','','',person_id_search,
                                                arrived_at_search,confidence_search,arrived_image_url_search,image_url,ts,camera_name]
                                ws.append(already_insert)
                            inner += 1
                else:
                    temp_no_number = [baofan_name, daofan_id_number, daofan_ditch, _id, daofan_first_arrive, "详情匹配结果是空的"]
                    ws.append(temp_no_number)
            else:
                _id = baobeilist[baobei_cursor].get('_id')
                daofan_name = baobeilist[baobei_cursor].get('name')
                daofan_id_number = baobeilist[baobei_cursor].get('id_number')
                daofan_ditch = baobeilist[baobei_cursor].get('ditch')
                first_arrive = baobeilist[baobei_cursor].get('first_arrive')
                daofan_first_arrive = timeutil(first_arrive)
                #print("没有详情的数据首次到访记录",daofan_first_arrive)
                temp_no_number = [daofan_name,daofan_id_number,daofan_ditch,_id,daofan_first_arrive,"没有详情数据"]
                ws.append(temp_no_number)
            baobei_cursor += 1
    else:
        temp_result = [store_id,'','',"无自主报备数据"]
        ws.append(temp_result)
    return "自主报备数据收集完毕!"


#识别结果数据写入
async def shibie_cleaning(store_id,baobeilist,headers,ws):
    pass


#主函数
async def main():
    #参数配置
    url = "https://icloud.sensetime.com/senserealty/login"
    username = "SKtest"
    password = ""
    #login_res = await token_main(url=url,username=username,password=password)   #1.登录主函数获取用户名密码
    #token = login_res.get("token")
    #companyid = login_res.get("companyid")
    headers = {
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36",
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiSUQxNTY3IiwiY29tcGFueV9pZCI6IklEMTE1MCIsInVzZXJfdHlwZSI6ImFkbWluIiwibm9kZV9pZCI6IjAwMCIsImFrIjoibDEtZTAxYmZmMjItODBhNWNjOGY5MjM0IiwidXNlcl9hZ2VudCI6MSwiZXhwIjoxNTg2MTUxNjQ0fQ.NSKHoVnPBnslf5XDCTFaIyktUv1UJIdf-nSVe0GBcMg",#eval(token),
        "Referer": "https://icloud.sensetime.com/senserealty/store/operate",
        "Sec-Fetch-Site": "same-origin",
        "Sec-Fetch-Mode": "cors",
        "Pragma": "no-cache",
        "Host": "icloud.sensetime.com",
        "Accept": "application/json, text/plain, */*"
        }
    storeres = await store_list_find('ID1150',headers)               #eval(companyid) 传递的会带引号需要去掉
    print(storeres,":",type(storeres))
    store_name = get_store_name('cdb978497a',**storeres)             #根据案场id生成中文名
    print(store_name,":",type(store_name))
    #1.渠道风控数据写入
    store_id_qudao,qudaonum = await get_qudao_page('cdb978497a',headers)   #1.先调用渠道方法返回渠道数据
    #返回案场id表示没有渠道风控数据
    ws,wb = excel_write_open(0,"渠道风控测试")
    qudao_result = await qudao_cleaning(store_id_qudao,qudaonum,headers,ws)      #2.整和写入渠道详情数据
    print(qudao_result)
    excel_write_save("测试数据写入",wb)
    #2.自主报备数据写入(自主报备可以不刷证，返回身份证号可以为空)
    store_id_baobei, baobeinum = await get_baobei_page('e8b8027ffc', headers)
    ws,wb = excel_write_load("测试数据写入",1,"自主报备数据")
    baobei_result = await baobei_cleaning(store_id_baobei,baobeinum,headers,ws)
    print(baobei_result)
    excel_write_save("测试数据写入",wb)
    #3.识别结果数据写入



if __name__=="__main__":
    #asyncio.get_event_loop().run_until_complete(main())
    #asyncio.get_event_loop().run_until_complete(store_find())
    #asyncio.get_event_loop().run_until_complete(qudao_page('cdb978497a'))
    #asyncio.get_event_loop().run_until_complete(qudao_detail())
    #asyncio.get_event_loop().run_until_complete(baobei_page())
    #asyncio.get_event_loop().run_until_complete(baobei_detail())
    #asyncio.get_event_loop().run_until_complete(search_page())
    #asyncio.get_event_loop().run_until_complete(daofang_page_count())
    #asyncio.get_event_loop().run_until_complete(daofang_page_summary())
    #asyncio.get_event_loop().run_until_complete(shibie_detail())
    #asyncio.get_event_loop().run_until_complete(shibie_detail())
    asyncio.get_event_loop().run_until_complete(main())